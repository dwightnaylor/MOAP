Largest element (POSSIBLE)
		Given a list of numbers, find the largest one
	Long form
		Given list<number> x; Find z st child(x,z) & forall(y st child(x,y) : lessThanEqual(y,z))
	Short form
		Given list<number> x; Find z in x st z is maximized
	New Form
		Given(list<number> x), Find(z st child(x,z) & maximized(z))
	Thought process
		Latest version:
		Given list<number> x, Find z st child(x,z) & forall(y st child(x,y) : less_than_equal(y,z))
	can be reduced via brute-forcing z to
		Given list<number>(x),z st child(x,z), Find z st forall(y st child(x,y) : less_than_equal(y,z))
	we need to eliminate the forall()...
		Given list<number>(x), y, z st child(x,z) & child(x,y); Find y st !exists(y st child(x,y) : !less_than_equal(y,z))


code:
foreach z in x
	bool largest = true
	foreach y in x
		if(!(y<=z))
			largest = false;
	if(largest)
return z


OLD:
We need to find a z in x, brute force all of them, checking each one to make sure every other element is smaller

Output:

Brute Force to solve for z
Simple Testing to solve for forall(y st child(y,x) : less_than_equal(y,z))
The way to test against a "forall" is just to try all of them, so we try all of them
if they all pass, return that z works

Brute Force to solve for z
	break the problem to a sub problem:
	



V2:
Because less_than_equal is transitive, we know that we can just keep track of the greatest we find over one iteration.

This could be derived. Namely, when we're trying to satisfy
"forall(y st child(y,x) : less_than_equal(y,z))", we could do so by saying that when we save something it is greater than everything before it, and by the time we get to the end we'll have everything??
