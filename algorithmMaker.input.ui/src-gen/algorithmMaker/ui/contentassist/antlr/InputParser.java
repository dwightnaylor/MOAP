/*
 * generated by Xtext
 */
package algorithmMaker.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import algorithmMaker.services.InputGrammarAccess;

public class InputParser extends AbstractContentAssistParser {
	
	@Inject
	private InputGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected algorithmMaker.ui.contentassist.antlr.internal.InternalInputParser createParser() {
		algorithmMaker.ui.contentassist.antlr.internal.InternalInputParser result = new algorithmMaker.ui.contentassist.antlr.internal.InternalInputParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getQuantifierAccess().getQuantifierAlternatives_0_0(), "rule__Quantifier__QuantifierAlternatives_0_0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getProblemAccess().getGroup(), "rule__Problem__Group__0");
					put(grammarAccess.getProblemAccess().getGroup_0(), "rule__Problem__Group_0__0");
					put(grammarAccess.getProblemAccess().getGroup_0_1(), "rule__Problem__Group_0_1__0");
					put(grammarAccess.getORingAccess().getGroup(), "rule__ORing__Group__0");
					put(grammarAccess.getORingAccess().getGroup_1(), "rule__ORing__Group_1__0");
					put(grammarAccess.getANDingAccess().getGroup(), "rule__ANDing__Group__0");
					put(grammarAccess.getANDingAccess().getGroup_1(), "rule__ANDing__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getQuantifierAccess().getGroup(), "rule__Quantifier__Group__0");
					put(grammarAccess.getAtomicAccess().getGroup(), "rule__Atomic__Group__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_1_1(), "rule__Atomic__Group_1_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_1_1_1(), "rule__Atomic__Group_1_1_1__0");
					put(grammarAccess.getInputAccess().getGivenAssignment_1(), "rule__Input__GivenAssignment_1");
					put(grammarAccess.getInputAccess().getGoalAssignment_4(), "rule__Input__GoalAssignment_4");
					put(grammarAccess.getProblemAccess().getVarsAssignment_0_0(), "rule__Problem__VarsAssignment_0_0");
					put(grammarAccess.getProblemAccess().getVarsAssignment_0_1_1(), "rule__Problem__VarsAssignment_0_1_1");
					put(grammarAccess.getProblemAccess().getPropertyAssignment_2(), "rule__Problem__PropertyAssignment_2");
					put(grammarAccess.getORingAccess().getRightAssignment_1_2(), "rule__ORing__RightAssignment_1_2");
					put(grammarAccess.getANDingAccess().getRightAssignment_1_2(), "rule__ANDing__RightAssignment_1_2");
					put(grammarAccess.getQuantifierAccess().getQuantifierAssignment_0(), "rule__Quantifier__QuantifierAssignment_0");
					put(grammarAccess.getQuantifierAccess().getSubjectAssignment_2(), "rule__Quantifier__SubjectAssignment_2");
					put(grammarAccess.getQuantifierAccess().getPredicateAssignment_4(), "rule__Quantifier__PredicateAssignment_4");
					put(grammarAccess.getAtomicAccess().getFunctionAssignment_0(), "rule__Atomic__FunctionAssignment_0");
					put(grammarAccess.getAtomicAccess().getArgsAssignment_1_1_0(), "rule__Atomic__ArgsAssignment_1_1_0");
					put(grammarAccess.getAtomicAccess().getArgsAssignment_1_1_1_1(), "rule__Atomic__ArgsAssignment_1_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			algorithmMaker.ui.contentassist.antlr.internal.InternalInputParser typedParser = (algorithmMaker.ui.contentassist.antlr.internal.InternalInputParser) parser;
			typedParser.entryRuleInput();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public InputGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(InputGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
