/*
 * generated by Xtext
 */
grammar InternalInput;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package algorithmMaker.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package algorithmMaker.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import algorithmMaker.services.InputGrammarAccess;

}

@parser::members {
 
 	private InputGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InputGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProblemNoVars
entryRuleProblemNoVars 
:
{ before(grammarAccess.getProblemNoVarsRule()); }
	 ruleProblemNoVars
{ after(grammarAccess.getProblemNoVarsRule()); } 
	 EOF 
;

// Rule ProblemNoVars
ruleProblemNoVars
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProblemNoVarsAccess().getPropertyAssignment()); }
(rule__ProblemNoVars__PropertyAssignment)
{ after(grammarAccess.getProblemNoVarsAccess().getPropertyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProblemPropertyOptional
entryRuleProblemPropertyOptional 
:
{ before(grammarAccess.getProblemPropertyOptionalRule()); }
	 ruleProblemPropertyOptional
{ after(grammarAccess.getProblemPropertyOptionalRule()); } 
	 EOF 
;

// Rule ProblemPropertyOptional
ruleProblemPropertyOptional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getGroup()); }
(rule__ProblemPropertyOptional__Group__0)
{ after(grammarAccess.getProblemPropertyOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProblem
entryRuleProblem 
:
{ before(grammarAccess.getProblemRule()); }
	 ruleProblem
{ after(grammarAccess.getProblemRule()); } 
	 EOF 
;

// Rule Problem
ruleProblem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProblemAccess().getGroup()); }
(rule__Problem__Group__0)
{ after(grammarAccess.getProblemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleORing
entryRuleORing 
:
{ before(grammarAccess.getORingRule()); }
	 ruleORing
{ after(grammarAccess.getORingRule()); } 
	 EOF 
;

// Rule ORing
ruleORing
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getORingAccess().getGroup()); }
(rule__ORing__Group__0)
{ after(grammarAccess.getORingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleANDing
entryRuleANDing 
:
{ before(grammarAccess.getANDingRule()); }
	 ruleANDing
{ after(grammarAccess.getANDingRule()); } 
	 EOF 
;

// Rule ANDing
ruleANDing
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANDingAccess().getGroup()); }
(rule__ANDing__Group__0)
{ after(grammarAccess.getANDingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProblemShell
entryRuleProblemShell 
:
{ before(grammarAccess.getProblemShellRule()); }
	 ruleProblemShell
{ after(grammarAccess.getProblemShellRule()); } 
	 EOF 
;

// Rule ProblemShell
ruleProblemShell
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProblemShellAccess().getGroup()); }
(rule__ProblemShell__Group__0)
{ after(grammarAccess.getProblemShellAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getGroup()); }
(rule__Negation__Group__0)
{ after(grammarAccess.getNegationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifier
entryRuleQuantifier 
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifierAccess().getGroup()); }
(rule__Quantifier__Group__0)
{ after(grammarAccess.getQuantifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSugarAtomic
entryRuleSugarAtomic 
:
{ before(grammarAccess.getSugarAtomicRule()); }
	 ruleSugarAtomic
{ after(grammarAccess.getSugarAtomicRule()); } 
	 EOF 
;

// Rule SugarAtomic
ruleSugarAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSugarAtomicAccess().getGroup()); }
(rule__SugarAtomic__Group__0)
{ after(grammarAccess.getSugarAtomicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getGroup()); }
(rule__Atomic__Group__0)
{ after(grammarAccess.getAtomicAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTheorem
entryRuleTheorem 
:
{ before(grammarAccess.getTheoremRule()); }
	 ruleTheorem
{ after(grammarAccess.getTheoremRule()); } 
	 EOF 
;

// Rule Theorem
ruleTheorem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTheoremAccess().getGroup()); }
(rule__Theorem__Group__0)
{ after(grammarAccess.getTheoremAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSugarAddition
entryRuleSugarAddition 
:
{ before(grammarAccess.getSugarAdditionRule()); }
	 ruleSugarAddition
{ after(grammarAccess.getSugarAdditionRule()); } 
	 EOF 
;

// Rule SugarAddition
ruleSugarAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSugarAdditionAccess().getGroup()); }
(rule__SugarAddition__Group__0)
{ after(grammarAccess.getSugarAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSugarMultiplication
entryRuleSugarMultiplication 
:
{ before(grammarAccess.getSugarMultiplicationRule()); }
	 ruleSugarMultiplication
{ after(grammarAccess.getSugarMultiplicationRule()); } 
	 EOF 
;

// Rule SugarMultiplication
ruleSugarMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getGroup()); }
(rule__SugarMultiplication__Group__0)
{ after(grammarAccess.getSugarMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSugarNumericalPrimary
entryRuleSugarNumericalPrimary 
:
{ before(grammarAccess.getSugarNumericalPrimaryRule()); }
	 ruleSugarNumericalPrimary
{ after(grammarAccess.getSugarNumericalPrimaryRule()); } 
	 EOF 
;

// Rule SugarNumericalPrimary
ruleSugarNumericalPrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getAlternatives()); }
(rule__SugarNumericalPrimary__Alternatives)
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSugarVariable
entryRuleSugarVariable 
:
{ before(grammarAccess.getSugarVariableRule()); }
	 ruleSugarVariable
{ after(grammarAccess.getSugarVariableRule()); } 
	 EOF 
;

// Rule SugarVariable
ruleSugarVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSugarVariableAccess().getArgAssignment()); }
(rule__SugarVariable__ArgAssignment)
{ after(grammarAccess.getSugarVariableAccess().getArgAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
(rule__NumberLiteral__ValueAssignment)
{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Input__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_3_0()); }
(rule__Input__Group_3_0__0)
{ after(grammarAccess.getInputAccess().getGroup_3_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getGroup_3_1()); }
(rule__Input__Group_3_1__0)
{ after(grammarAccess.getInputAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TaskAlternatives_3_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTaskFindKeyword_3_0_0_0_0()); }

	'Find' 

{ after(grammarAccess.getInputAccess().getTaskFindKeyword_3_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getTaskCountKeyword_3_0_0_0_1()); }

	'Count' 

{ after(grammarAccess.getInputAccess().getTaskCountKeyword_3_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__GoalAlternatives_3_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGoalProblemParserRuleCall_3_1_1_0_0()); }
	ruleProblem
{ after(grammarAccess.getInputAccess().getGoalProblemParserRuleCall_3_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getGoalProblemNoVarsParserRuleCall_3_1_1_0_1()); }
	ruleProblemNoVars
{ after(grammarAccess.getInputAccess().getGoalProblemNoVarsParserRuleCall_3_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_0()); }
	ruleAtomic
{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getSugarAtomicParserRuleCall_1()); }
	ruleSugarAtomic
{ after(grammarAccess.getPrimaryAccess().getSugarAtomicParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getQuantifierParserRuleCall_2()); }
	ruleQuantifier
{ after(grammarAccess.getPrimaryAccess().getQuantifierParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getProblemShellParserRuleCall_3()); }
	ruleProblemShell
{ after(grammarAccess.getPrimaryAccess().getProblemShellParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_4()); }
(rule__Primary__Group_4__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_5()); }
	ruleBooleanLiteral
{ after(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getNegationParserRuleCall_6()); }
	ruleNegation
{ after(grammarAccess.getPrimaryAccess().getNegationParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__QuantifierAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getQuantifierForallKeyword_0_0_0()); }

	'forall' 

{ after(grammarAccess.getQuantifierAccess().getQuantifierForallKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getQuantifierAccess().getQuantifierExistsKeyword_0_0_1()); }

	'exists' 

{ after(grammarAccess.getQuantifierAccess().getQuantifierExistsKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }

	'TRUE' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }

	'FALSE' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__ImplicationAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getImplicationHyphenMinusGreaterThanSignKeyword_1_0_0()); }

	'->' 

{ after(grammarAccess.getTheoremAccess().getImplicationHyphenMinusGreaterThanSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getTheoremAccess().getImplicationLessThanSignHyphenMinusKeyword_1_0_1()); }

	'<-' 

{ after(grammarAccess.getTheoremAccess().getImplicationLessThanSignHyphenMinusKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getTheoremAccess().getImplicationLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_2()); }

	'<->' 

{ after(grammarAccess.getTheoremAccess().getImplicationLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__SymbolAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getSymbolPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getSugarAdditionAccess().getSymbolPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getSugarAdditionAccess().getSymbolHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getSugarAdditionAccess().getSymbolHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__SymbolAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getSymbolAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getSugarMultiplicationAccess().getSymbolAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getSugarMultiplicationAccess().getSymbolSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getSugarMultiplicationAccess().getSymbolSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarNumericalPrimary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getSugarAtomicParserRuleCall_1()); }
	ruleSugarAtomic
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getSugarAtomicParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getGroup_2()); }
(rule__SugarNumericalPrimary__Group_2__0)
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getSugarVariableParserRuleCall_3()); }
	ruleSugarVariable
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getSugarVariableParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGivenKeyword_0()); }

	'Given' 

{ after(grammarAccess.getInputAccess().getGivenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGivenAssignment_1()); }
(rule__Input__GivenAssignment_1)
{ after(grammarAccess.getInputAccess().getGivenAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getInputAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_3()); }
(rule__Input__Alternatives_3)?
{ after(grammarAccess.getInputAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_4()); }
(rule__Input__Group_4__0)?
{ after(grammarAccess.getInputAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Input__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_0__0__Impl
	rule__Input__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTaskAssignment_3_0_0()); }
(rule__Input__TaskAssignment_3_0_0)
{ after(grammarAccess.getInputAccess().getTaskAssignment_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGoalAssignment_3_0_1()); }
(rule__Input__GoalAssignment_3_0_1)
{ after(grammarAccess.getInputAccess().getGoalAssignment_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_1__0__Impl
	rule__Input__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTaskAssignment_3_1_0()); }
(rule__Input__TaskAssignment_3_1_0)
{ after(grammarAccess.getInputAccess().getTaskAssignment_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGoalAssignment_3_1_1()); }
(rule__Input__GoalAssignment_3_1_1)
{ after(grammarAccess.getInputAccess().getGoalAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4__0__Impl
	rule__Input__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSemicolonKeyword_4_0()); }

	';' 

{ after(grammarAccess.getInputAccess().getSemicolonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4__1__Impl
	rule__Input__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTheoremsKeyword_4_1()); }

	'Theorems:' 

{ after(grammarAccess.getInputAccess().getTheoremsKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4__2__Impl
	rule__Input__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTheoremsAssignment_4_2()); }
(rule__Input__TheoremsAssignment_4_2)
{ after(grammarAccess.getInputAccess().getTheoremsAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4__3__Impl
	rule__Input__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_4_3()); }
(rule__Input__Group_4_3__0)*
{ after(grammarAccess.getInputAccess().getGroup_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_4__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSemicolonKeyword_4_4()); }
(
	';' 
)?
{ after(grammarAccess.getInputAccess().getSemicolonKeyword_4_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Input__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4_3__0__Impl
	rule__Input__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSemicolonKeyword_4_3_0()); }

	';' 

{ after(grammarAccess.getInputAccess().getSemicolonKeyword_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_4_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTheoremsAssignment_4_3_1()); }
(rule__Input__TheoremsAssignment_4_3_1)
{ after(grammarAccess.getInputAccess().getTheoremsAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProblemPropertyOptional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group__0__Impl
	rule__ProblemPropertyOptional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getVarsAssignment_0()); }
(rule__ProblemPropertyOptional__VarsAssignment_0)
{ after(grammarAccess.getProblemPropertyOptionalAccess().getVarsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemPropertyOptional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group__1__Impl
	rule__ProblemPropertyOptional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getGroup_1()); }
(rule__ProblemPropertyOptional__Group_1__0)*
{ after(grammarAccess.getProblemPropertyOptionalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemPropertyOptional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getGroup_2()); }
(rule__ProblemPropertyOptional__Group_2__0)?
{ after(grammarAccess.getProblemPropertyOptionalAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProblemPropertyOptional__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group_1__0__Impl
	rule__ProblemPropertyOptional__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getProblemPropertyOptionalAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemPropertyOptional__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getVarsAssignment_1_1()); }
(rule__ProblemPropertyOptional__VarsAssignment_1_1)
{ after(grammarAccess.getProblemPropertyOptionalAccess().getVarsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProblemPropertyOptional__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group_2__0__Impl
	rule__ProblemPropertyOptional__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getStKeyword_2_0()); }

	'st' 

{ after(grammarAccess.getProblemPropertyOptionalAccess().getStKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemPropertyOptional__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemPropertyOptional__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getPropertyAssignment_2_1()); }
(rule__ProblemPropertyOptional__PropertyAssignment_2_1)
{ after(grammarAccess.getProblemPropertyOptionalAccess().getPropertyAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Problem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group__0__Impl
	rule__Problem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getVarsAssignment_0()); }
(rule__Problem__VarsAssignment_0)
{ after(grammarAccess.getProblemAccess().getVarsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Problem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group__1__Impl
	rule__Problem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getGroup_1()); }
(rule__Problem__Group_1__0)*
{ after(grammarAccess.getProblemAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Problem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group__2__Impl
	rule__Problem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getStKeyword_2()); }

	'st' 

{ after(grammarAccess.getProblemAccess().getStKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Problem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getPropertyAssignment_3()); }
(rule__Problem__PropertyAssignment_3)
{ after(grammarAccess.getProblemAccess().getPropertyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Problem__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group_1__0__Impl
	rule__Problem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getProblemAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Problem__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Problem__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getVarsAssignment_1_1()); }
(rule__Problem__VarsAssignment_1_1)
{ after(grammarAccess.getProblemAccess().getVarsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)?
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVarNameAssignment_1()); }
(rule__Declaration__VarNameAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getVarNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_0()); }
(rule__Type__NameAssignment_0)
{ after(grammarAccess.getTypeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)?
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getTypeAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__1__Impl
	rule__Type__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTemplateTypeAssignment_1_1()); }
(rule__Type__TemplateTypeAssignment_1_1)
{ after(grammarAccess.getTypeAccess().getTemplateTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_1_2()); }

	'>' 

{ after(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ORing__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORing__Group__0__Impl
	rule__ORing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getANDingParserRuleCall_0()); }
	ruleANDing
{ after(grammarAccess.getORingAccess().getANDingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ORing__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORing__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getGroup_1()); }
(rule__ORing__Group_1__0)*
{ after(grammarAccess.getORingAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ORing__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORing__Group_1__0__Impl
	rule__ORing__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getORingLeftAction_1_0()); }
(

)
{ after(grammarAccess.getORingAccess().getORingLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ORing__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORing__Group_1__1__Impl
	rule__ORing__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getORingAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ORing__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORing__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getRightAssignment_1_2()); }
(rule__ORing__RightAssignment_1_2)
{ after(grammarAccess.getORingAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ANDing__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANDing__Group__0__Impl
	rule__ANDing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getANDingAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANDing__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANDing__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getGroup_1()); }
(rule__ANDing__Group_1__0)*
{ after(grammarAccess.getANDingAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ANDing__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANDing__Group_1__0__Impl
	rule__ANDing__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getANDingLeftAction_1_0()); }
(

)
{ after(grammarAccess.getANDingAccess().getANDingLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANDing__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANDing__Group_1__1__Impl
	rule__ANDing__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getAmpersandKeyword_1_1()); }

	'&' 

{ after(grammarAccess.getANDingAccess().getAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANDing__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANDing__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getRightAssignment_1_2()); }
(rule__ANDing__RightAssignment_1_2)
{ after(grammarAccess.getANDingAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_4__0__Impl
	rule__Primary__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_4__1__Impl
	rule__Primary__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getORingParserRuleCall_4_1()); }
	ruleORing
{ after(grammarAccess.getPrimaryAccess().getORingParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProblemShell__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemShell__Group__0__Impl
	rule__ProblemShell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemShell__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemShellAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getProblemShellAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemShell__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemShell__Group__1__Impl
	rule__ProblemShell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemShell__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemShellAccess().getProblemAssignment_1()); }
(rule__ProblemShell__ProblemAssignment_1)
{ after(grammarAccess.getProblemShellAccess().getProblemAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemShell__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProblemShell__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemShell__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemShellAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getProblemShellAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Negation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__0__Impl
	rule__Negation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNegatedAssignment_1()); }
(rule__Negation__NegatedAssignment_1)
{ after(grammarAccess.getNegationAccess().getNegatedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Quantifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__0__Impl
	rule__Quantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getQuantifierAssignment_0()); }
(rule__Quantifier__QuantifierAssignment_0)
{ after(grammarAccess.getQuantifierAccess().getQuantifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__1__Impl
	rule__Quantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getQuantifierAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__2__Impl
	rule__Quantifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getSubjectAssignment_2()); }
(rule__Quantifier__SubjectAssignment_2)
{ after(grammarAccess.getQuantifierAccess().getSubjectAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__3__Impl
	rule__Quantifier__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getQuantifierAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__4__Impl
	rule__Quantifier__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getPredicateAssignment_4()); }
(rule__Quantifier__PredicateAssignment_4)
{ after(grammarAccess.getQuantifierAccess().getPredicateAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Quantifier__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getQuantifierAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SugarAtomic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group__0__Impl
	rule__SugarAtomic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getFunctionAssignment_0()); }
(rule__SugarAtomic__FunctionAssignment_0)
{ after(grammarAccess.getSugarAtomicAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group__1__Impl
	rule__SugarAtomic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getSugarAtomicAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group__2__Impl
	rule__SugarAtomic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getSugarAtomicAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group__3__Impl
	rule__SugarAtomic__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getGroup_3()); }
(rule__SugarAtomic__Group_3__0)?
{ after(grammarAccess.getSugarAtomicAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSugarAtomicAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SugarAtomic__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group_3__0__Impl
	rule__SugarAtomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getArgsAssignment_3_0()); }
(rule__SugarAtomic__ArgsAssignment_3_0)
{ after(grammarAccess.getSugarAtomicAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getGroup_3_1()); }
(rule__SugarAtomic__Group_3_1__0)*
{ after(grammarAccess.getSugarAtomicAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SugarAtomic__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group_3_1__0__Impl
	rule__SugarAtomic__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getSugarAtomicAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAtomic__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAtomic__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getArgsAssignment_3_1_1()); }
(rule__SugarAtomic__ArgsAssignment_3_1_1)
{ after(grammarAccess.getSugarAtomicAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group__0__Impl
	rule__Atomic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunctionAssignment_0()); }
(rule__Atomic__FunctionAssignment_0)
{ after(grammarAccess.getAtomicAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group__1__Impl
	rule__Atomic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group__2__Impl
	rule__Atomic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
(rule__Atomic__Group_2__0)?
{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Atomic__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getArgsAssignment_2_0()); }
(rule__Atomic__ArgsAssignment_2_0)
{ after(grammarAccess.getAtomicAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_2_1()); }
(rule__Atomic__Group_2_1__0)*
{ after(grammarAccess.getAtomicAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2_1__0__Impl
	rule__Atomic__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getAtomicAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getArgsAssignment_2_1_1()); }
(rule__Atomic__ArgsAssignment_2_1_1)
{ after(grammarAccess.getAtomicAccess().getArgsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Theorem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__0__Impl
	rule__Theorem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRequirementAssignment_0()); }
(rule__Theorem__RequirementAssignment_0)
{ after(grammarAccess.getTheoremAccess().getRequirementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__1__Impl
	rule__Theorem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getImplicationAssignment_1()); }
(rule__Theorem__ImplicationAssignment_1)
{ after(grammarAccess.getTheoremAccess().getImplicationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__2__Impl
	rule__Theorem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getResultAssignment_2()); }
(rule__Theorem__ResultAssignment_2)
{ after(grammarAccess.getTheoremAccess().getResultAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__3__Impl
	rule__Theorem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getTheoremAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__4__Impl
	rule__Theorem__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getCostAssignment_4()); }
(rule__Theorem__CostAssignment_4)
{ after(grammarAccess.getTheoremAccess().getCostAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__5__Impl
	rule__Theorem__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getTheoremAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__6__Impl
	rule__Theorem__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getDescriptionAssignment_6()); }
(rule__Theorem__DescriptionAssignment_6)
{ after(grammarAccess.getTheoremAccess().getDescriptionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getGroup_7()); }
(rule__Theorem__Group_7__0)?
{ after(grammarAccess.getTheoremAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Theorem__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group_7__0__Impl
	rule__Theorem__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getCommaKeyword_7_0()); }

	',' 

{ after(grammarAccess.getTheoremAccess().getCommaKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getPseudoCodeAssignment_7_1()); }
(rule__Theorem__PseudoCodeAssignment_7_1)
{ after(grammarAccess.getTheoremAccess().getPseudoCodeAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SugarAddition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAddition__Group__0__Impl
	rule__SugarAddition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getSugarMultiplicationParserRuleCall_0()); }
	ruleSugarMultiplication
{ after(grammarAccess.getSugarAdditionAccess().getSugarMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAddition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAddition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getGroup_1()); }
(rule__SugarAddition__Group_1__0)*
{ after(grammarAccess.getSugarAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SugarAddition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAddition__Group_1__0__Impl
	rule__SugarAddition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getSugarAdditionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSugarAdditionAccess().getSugarAdditionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAddition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAddition__Group_1__1__Impl
	rule__SugarAddition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getSymbolAssignment_1_1()); }
(rule__SugarAddition__SymbolAssignment_1_1)
{ after(grammarAccess.getSugarAdditionAccess().getSymbolAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarAddition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarAddition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getRightAssignment_1_2()); }
(rule__SugarAddition__RightAssignment_1_2)
{ after(grammarAccess.getSugarAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SugarMultiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarMultiplication__Group__0__Impl
	rule__SugarMultiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getSugarNumericalPrimaryParserRuleCall_0()); }
	ruleSugarNumericalPrimary
{ after(grammarAccess.getSugarMultiplicationAccess().getSugarNumericalPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarMultiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarMultiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getGroup_1()); }
(rule__SugarMultiplication__Group_1__0)*
{ after(grammarAccess.getSugarMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SugarMultiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarMultiplication__Group_1__0__Impl
	rule__SugarMultiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getSugarMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSugarMultiplicationAccess().getSugarMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarMultiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarMultiplication__Group_1__1__Impl
	rule__SugarMultiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getSymbolAssignment_1_1()); }
(rule__SugarMultiplication__SymbolAssignment_1_1)
{ after(grammarAccess.getSugarMultiplicationAccess().getSymbolAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarMultiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarMultiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getRightAssignment_1_2()); }
(rule__SugarMultiplication__RightAssignment_1_2)
{ after(grammarAccess.getSugarMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SugarNumericalPrimary__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarNumericalPrimary__Group_2__0__Impl
	rule__SugarNumericalPrimary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarNumericalPrimary__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getSugarNumericalPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarNumericalPrimary__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarNumericalPrimary__Group_2__1__Impl
	rule__SugarNumericalPrimary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarNumericalPrimary__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getSugarNumericalPrimaryParserRuleCall_2_1()); }
	ruleSugarNumericalPrimary
{ after(grammarAccess.getSugarNumericalPrimaryAccess().getSugarNumericalPrimaryParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SugarNumericalPrimary__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SugarNumericalPrimary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SugarNumericalPrimary__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarNumericalPrimaryAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getSugarNumericalPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Input__GivenAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGivenProblemPropertyOptionalParserRuleCall_1_0()); }
	ruleProblemPropertyOptional{ after(grammarAccess.getInputAccess().getGivenProblemPropertyOptionalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TaskAssignment_3_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTaskAlternatives_3_0_0_0()); }
(rule__Input__TaskAlternatives_3_0_0_0)
{ after(grammarAccess.getInputAccess().getTaskAlternatives_3_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__GoalAssignment_3_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGoalProblemParserRuleCall_3_0_1_0()); }
	ruleProblem{ after(grammarAccess.getInputAccess().getGoalProblemParserRuleCall_3_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TaskAssignment_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTaskTestKeyword_3_1_0_0()); }
(
{ before(grammarAccess.getInputAccess().getTaskTestKeyword_3_1_0_0()); }

	'Test' 

{ after(grammarAccess.getInputAccess().getTaskTestKeyword_3_1_0_0()); }
)

{ after(grammarAccess.getInputAccess().getTaskTestKeyword_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__GoalAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGoalAlternatives_3_1_1_0()); }
(rule__Input__GoalAlternatives_3_1_1_0)
{ after(grammarAccess.getInputAccess().getGoalAlternatives_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TheoremsAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTheoremsTheoremParserRuleCall_4_2_0()); }
	ruleTheorem{ after(grammarAccess.getInputAccess().getTheoremsTheoremParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TheoremsAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTheoremsTheoremParserRuleCall_4_3_1_0()); }
	ruleTheorem{ after(grammarAccess.getInputAccess().getTheoremsTheoremParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemNoVars__PropertyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemNoVarsAccess().getPropertyORingParserRuleCall_0()); }
	ruleORing{ after(grammarAccess.getProblemNoVarsAccess().getPropertyORingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__VarsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getVarsDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getProblemPropertyOptionalAccess().getVarsDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__VarsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getVarsDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getProblemPropertyOptionalAccess().getVarsDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemPropertyOptional__PropertyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemPropertyOptionalAccess().getPropertyORingParserRuleCall_2_1_0()); }
	ruleORing{ after(grammarAccess.getProblemPropertyOptionalAccess().getPropertyORingParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__VarsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getVarsDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getProblemAccess().getVarsDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__VarsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getVarsDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getProblemAccess().getVarsDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Problem__PropertyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemAccess().getPropertyORingParserRuleCall_3_0()); }
	ruleORing{ after(grammarAccess.getProblemAccess().getPropertyORingParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__VarNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVarNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDeclarationAccess().getVarNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TemplateTypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTemplateTypeTypeParserRuleCall_1_1_0()); }
	ruleType{ after(grammarAccess.getTypeAccess().getTemplateTypeTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ORing__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORingAccess().getRightANDingParserRuleCall_1_2_0()); }
	ruleANDing{ after(grammarAccess.getORingAccess().getRightANDingParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANDing__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDingAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getANDingAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemShell__ProblemAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemShellAccess().getProblemProblemParserRuleCall_1_0()); }
	ruleProblem{ after(grammarAccess.getProblemShellAccess().getProblemProblemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__NegatedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNegatedPrimaryParserRuleCall_1_0()); }
	rulePrimary{ after(grammarAccess.getNegationAccess().getNegatedPrimaryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__QuantifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getQuantifierAlternatives_0_0()); }
(rule__Quantifier__QuantifierAlternatives_0_0)
{ after(grammarAccess.getQuantifierAccess().getQuantifierAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__SubjectAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getSubjectProblemParserRuleCall_2_0()); }
	ruleProblem{ after(grammarAccess.getQuantifierAccess().getSubjectProblemParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__PredicateAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getPredicateORingParserRuleCall_4_0()); }
	ruleORing{ after(grammarAccess.getQuantifierAccess().getPredicateORingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getFunctionIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSugarAtomicAccess().getFunctionIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getArgsSugarAdditionParserRuleCall_3_0_0()); }
	ruleSugarAddition{ after(grammarAccess.getSugarAtomicAccess().getArgsSugarAdditionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAtomic__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAtomicAccess().getArgsSugarAdditionParserRuleCall_3_1_1_0()); }
	ruleSugarAddition{ after(grammarAccess.getSugarAtomicAccess().getArgsSugarAdditionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunctionIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getFunctionIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getArgsIDTerminalRuleCall_2_0_0()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getArgsIDTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ArgsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getArgsIDTerminalRuleCall_2_1_1_0()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getArgsIDTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
(rule__BooleanLiteral__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__RequirementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRequirementORingParserRuleCall_0_0()); }
	ruleORing{ after(grammarAccess.getTheoremAccess().getRequirementORingParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__ImplicationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getImplicationAlternatives_1_0()); }
(rule__Theorem__ImplicationAlternatives_1_0)
{ after(grammarAccess.getTheoremAccess().getImplicationAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__ResultAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getResultORingParserRuleCall_2_0()); }
	ruleORing{ after(grammarAccess.getTheoremAccess().getResultORingParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__CostAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getCostINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getTheoremAccess().getCostINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__DescriptionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getDescriptionSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getTheoremAccess().getDescriptionSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__PseudoCodeAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getPseudoCodeSTRINGTerminalRuleCall_7_1_0()); }
	RULE_STRING{ after(grammarAccess.getTheoremAccess().getPseudoCodeSTRINGTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__SymbolAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getSymbolAlternatives_1_1_0()); }
(rule__SugarAddition__SymbolAlternatives_1_1_0)
{ after(grammarAccess.getSugarAdditionAccess().getSymbolAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarAddition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarAdditionAccess().getRightSugarMultiplicationParserRuleCall_1_2_0()); }
	ruleSugarMultiplication{ after(grammarAccess.getSugarAdditionAccess().getRightSugarMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__SymbolAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getSymbolAlternatives_1_1_0()); }
(rule__SugarMultiplication__SymbolAlternatives_1_1_0)
{ after(grammarAccess.getSugarMultiplicationAccess().getSymbolAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarMultiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarMultiplicationAccess().getRightSugarNumericalPrimaryParserRuleCall_1_2_0()); }
	ruleSugarNumericalPrimary{ after(grammarAccess.getSugarMultiplicationAccess().getRightSugarNumericalPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SugarVariable__ArgAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSugarVariableAccess().getArgIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSugarVariableAccess().getArgIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


