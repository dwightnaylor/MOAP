grammar algorithmMaker.Input with org.eclipse.xtext.common.Terminals
//TODO: Sugar: math signs, comparators
//TODO: Sugar: implies "->, <-, <->" : relies on inline declarations?
//TODO: if get(x,i,xi) is used, test for index(x,i) automatically
//FIXME: Make sugar a separate syntactic artifact that can be completely removed after desugaring.
//		 The most prominent example of this is for nested atomics. The way these are done now is by allowing
//		 a general nested atomic input style. This is terrible. The core syntax just shouldn't allow this,
//		 but we should have a separate syntactic element that is only used in parsing which does allow it.
//		 Then when we desugar, we can get rid of it.
generate input "http://www.Input"

//NOTE: Any changes to the formatting should be reflected with changes here.
Input:
	'Given' given=ProblemPropertyOptional ';' ((task=("Find" | "Count") goal=Problem) | (task="Test" goal=(Problem |
	ProblemNoVars)))?
	(';' "Theorems:" theorems+=Theorem (';' theorems+=Theorem)* ';'?)?;

ProblemNoVars returns Problem:
	property=ORing;

ProblemPropertyOptional returns Problem:
	(vars+=Declaration) (',' vars+=Declaration)* ('st' property=ORing)?;

Problem:
	(vars+=Declaration) (',' vars+=Declaration)* 'st' property=ORing;

Declaration:
	(type=Type)? varName=ID;

Type:
	name=ID ('<' templateType=Type '>')?;

ORing returns Property:
	ANDing ({ORing.left=current} '|' right=ANDing)*;

ANDing returns Property:
	Primary ({ANDing.left=current} '&' right=Primary)*;

Primary returns Property:
	-> Atomic | SugarAtomic | Quantifier | ProblemShell | ('(' ORing ')') | BooleanLiteral | Negation;

ProblemShell:
	'{' problem=Problem '}';

Negation:
	'!' negated=Primary;

Quantifier:
	quantifier=('forall' | 'exists') '(' subject=Problem ':' predicate=ORing ')';

SugarAtomic:
	Function=ID '(' (args+=SugarAddition (',' args+=SugarAddition)*)? ')';

Atomic:
	Function=ID '(' (args+=ID (',' args+=ID)*)? ')';

BooleanLiteral:
	value=("TRUE" | "FALSE");

Theorem:
	Requirement=ORing
	Implication=("->" | "<-" | "<->")
	Result=ORing ',' Cost=INT ',' Description=STRING (',' PseudoCode=STRING)?;

	//**********Math things**********
SugarAddition returns SugarNumericalProperty:
	SugarMultiplication ({SugarAddition.left=current} symbol=('+' | '-') right=SugarMultiplication)*;

SugarMultiplication returns SugarNumericalProperty:
	SugarNumericalPrimary ({SugarMultiplication.left=current} symbol=('*' | '/') right=SugarNumericalPrimary)*;

SugarNumericalPrimary returns SugarNumericalProperty:
	NumberLiteral | -> Atomic | SugarAtomic | ('(' SugarNumericalPrimary ')');

NumberLiteral:
	value=INT;
