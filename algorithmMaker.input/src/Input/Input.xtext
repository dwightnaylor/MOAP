grammar algorithmMaker.Input with org.eclipse.xtext.common.Terminals
//TODO: : comparators
//TODO: if get(x,i,xi) is used, test for index(x,i) automatically
generate input "http://www.Input"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//NOTE: Any changes to the formatting should be reflected with changes here.
Input:
	'Given' given=ProblemPropertyOptional ';' (task=("Find" | "Count") goal=(Problem | ProblemNoVars))?
	(';' "Theorems:" theorems+=Theorem (';' theorems+=Theorem)* ';'?)?;

ProblemNoVars returns Problem:
	property=Implication;

ProblemPropertyOptional returns Problem:
	(vars+=Declaration) (',' vars+=Declaration)* ('st' property=Implication)?;

Problem:
	(vars+=Declaration) (',' vars+=Declaration)* 'st' property=Implication;

ProblemColon returns Problem:
	(vars+=Declaration) (',' vars+=Declaration)* ':' property=Implication;

Declaration:
	(type=Type)? varName=ID;

Type:
	name=ID ('<' templateType=Type '>')?;

Implication returns Property:
	ORing ({Implication.left=current} implication=('->' | '<-' | '<->') right=ORing)?;

ORing returns Property:
	ANDing ({ORing.left=current} '|' right=ANDing)*;

ANDing returns Property:
	Primary ({ANDing.left=current} '&' right=Primary)*;

Primary returns Property:
	Atomic | Quantifier | Grouping | BooleanLiteral | Negation;

Grouping returns Property:
	('(' Implication ')');

Negation:
	'!' negated=Primary;

Quantifier:
	quantifier=('forall' | 'exists') '(' subject=ProblemColon ')';

Atomic:
	Function=ID '(' (args+=Addition (',' args+=Addition)*)? ')';

BooleanLiteral:
	value=("TRUE" | "FALSE");

Theorem:
	content = Implication ':::' Description=STRING;

	//**********Math things**********
Addition returns NumericalProperty:
	Multiplication ({Addition.left=current} symbol=('+' | '-') right=Multiplication)*;

Multiplication returns NumericalProperty:
	NumericalPrimary ({Multiplication.left=current} symbol=('*' | '/') right=NumericalPrimary)*;

NumericalPrimary returns NumericalProperty:
	NumberLiteral | Atomic | ('(' NumericalPrimary ')') | Variable;

Variable:
	arg=ID;

NumberLiteral:
	value=DOUBLE;

DOUBLE returns ecore::EDouble:
	('-'? INT ('.' INT));
