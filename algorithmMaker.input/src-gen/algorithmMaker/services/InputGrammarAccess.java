/*
 * generated by Xtext
 */
package algorithmMaker.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class InputGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGivenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGivenProblemPropertyOptionalParserRuleCall_1_0 = (RuleCall)cGivenAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cTaskAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Alternatives cTaskAlternatives_3_0_0_0 = (Alternatives)cTaskAssignment_3_0_0.eContents().get(0);
		private final Keyword cTaskFindKeyword_3_0_0_0_0 = (Keyword)cTaskAlternatives_3_0_0_0.eContents().get(0);
		private final Keyword cTaskCountKeyword_3_0_0_0_1 = (Keyword)cTaskAlternatives_3_0_0_0.eContents().get(1);
		private final Assignment cGoalAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cGoalProblemParserRuleCall_3_0_1_0 = (RuleCall)cGoalAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTaskAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cTaskTestKeyword_3_1_0_0 = (Keyword)cTaskAssignment_3_1_0.eContents().get(0);
		private final Assignment cGoalAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Alternatives cGoalAlternatives_3_1_1_0 = (Alternatives)cGoalAssignment_3_1_1.eContents().get(0);
		private final RuleCall cGoalProblemParserRuleCall_3_1_1_0_0 = (RuleCall)cGoalAlternatives_3_1_1_0.eContents().get(0);
		private final RuleCall cGoalProblemNoVarsParserRuleCall_3_1_1_0_1 = (RuleCall)cGoalAlternatives_3_1_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTheoremsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTheoremsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTheoremsTheoremParserRuleCall_4_2_0 = (RuleCall)cTheoremsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTheoremsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTheoremsTheoremParserRuleCall_4_3_1_0 = (RuleCall)cTheoremsAssignment_4_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		////NOTE: Any changes to the formatting should be reflected with changes here.
		// Input:
		//	"Given" given=ProblemPropertyOptional ";" (task=("Find" | "Count") goal=Problem | task="Test" goal=(Problem |
		//	ProblemNoVars))? (";" "Theorems:" theorems+=Theorem (";" theorems+=Theorem)* ";"?)?;
		@Override public ParserRule getRule() { return rule; }

		//"Given" given=ProblemPropertyOptional ";" (task=("Find" | "Count") goal=Problem | task="Test" goal=(Problem |
		//ProblemNoVars))? (";" "Theorems:" theorems+=Theorem (";" theorems+=Theorem)* ";"?)?
		public Group getGroup() { return cGroup; }

		//"Given"
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }

		//given=ProblemPropertyOptional
		public Assignment getGivenAssignment_1() { return cGivenAssignment_1; }

		//ProblemPropertyOptional
		public RuleCall getGivenProblemPropertyOptionalParserRuleCall_1_0() { return cGivenProblemPropertyOptionalParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(task=("Find" | "Count") goal=Problem | task="Test" goal=(Problem | ProblemNoVars))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//task=("Find" | "Count") goal=Problem
		public Group getGroup_3_0() { return cGroup_3_0; }

		//task=("Find" | "Count")
		public Assignment getTaskAssignment_3_0_0() { return cTaskAssignment_3_0_0; }

		//"Find" | "Count"
		public Alternatives getTaskAlternatives_3_0_0_0() { return cTaskAlternatives_3_0_0_0; }

		//"Find"
		public Keyword getTaskFindKeyword_3_0_0_0_0() { return cTaskFindKeyword_3_0_0_0_0; }

		//"Count"
		public Keyword getTaskCountKeyword_3_0_0_0_1() { return cTaskCountKeyword_3_0_0_0_1; }

		//goal=Problem
		public Assignment getGoalAssignment_3_0_1() { return cGoalAssignment_3_0_1; }

		//Problem
		public RuleCall getGoalProblemParserRuleCall_3_0_1_0() { return cGoalProblemParserRuleCall_3_0_1_0; }

		//task="Test" goal=(Problem | ProblemNoVars)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//task="Test"
		public Assignment getTaskAssignment_3_1_0() { return cTaskAssignment_3_1_0; }

		//"Test"
		public Keyword getTaskTestKeyword_3_1_0_0() { return cTaskTestKeyword_3_1_0_0; }

		//goal=(Problem | ProblemNoVars)
		public Assignment getGoalAssignment_3_1_1() { return cGoalAssignment_3_1_1; }

		//Problem | ProblemNoVars
		public Alternatives getGoalAlternatives_3_1_1_0() { return cGoalAlternatives_3_1_1_0; }

		//Problem
		public RuleCall getGoalProblemParserRuleCall_3_1_1_0_0() { return cGoalProblemParserRuleCall_3_1_1_0_0; }

		//ProblemNoVars
		public RuleCall getGoalProblemNoVarsParserRuleCall_3_1_1_0_1() { return cGoalProblemNoVarsParserRuleCall_3_1_1_0_1; }

		//(";" "Theorems:" theorems+=Theorem (";" theorems+=Theorem)* ";"?)?
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//"Theorems:"
		public Keyword getTheoremsKeyword_4_1() { return cTheoremsKeyword_4_1; }

		//theorems+=Theorem
		public Assignment getTheoremsAssignment_4_2() { return cTheoremsAssignment_4_2; }

		//Theorem
		public RuleCall getTheoremsTheoremParserRuleCall_4_2_0() { return cTheoremsTheoremParserRuleCall_4_2_0; }

		//(";" theorems+=Theorem)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//";"
		public Keyword getSemicolonKeyword_4_3_0() { return cSemicolonKeyword_4_3_0; }

		//theorems+=Theorem
		public Assignment getTheoremsAssignment_4_3_1() { return cTheoremsAssignment_4_3_1; }

		//Theorem
		public RuleCall getTheoremsTheoremParserRuleCall_4_3_1_0() { return cTheoremsTheoremParserRuleCall_4_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4_4() { return cSemicolonKeyword_4_4; }
	}

	public class ProblemNoVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProblemNoVars");
		private final Assignment cPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertyORingParserRuleCall_0 = (RuleCall)cPropertyAssignment.eContents().get(0);
		
		//ProblemNoVars returns Problem:
		//	property=ORing;
		@Override public ParserRule getRule() { return rule; }

		//property=ORing
		public Assignment getPropertyAssignment() { return cPropertyAssignment; }

		//ORing
		public RuleCall getPropertyORingParserRuleCall_0() { return cPropertyORingParserRuleCall_0; }
	}

	public class ProblemPropertyOptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProblemPropertyOptional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsDeclarationParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsDeclarationParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyORingParserRuleCall_2_1_0 = (RuleCall)cPropertyAssignment_2_1.eContents().get(0);
		
		//ProblemPropertyOptional returns Problem:
		//	vars+=Declaration ("," vars+=Declaration)* ("st" property=ORing)?;
		@Override public ParserRule getRule() { return rule; }

		//vars+=Declaration ("," vars+=Declaration)* ("st" property=ORing)?
		public Group getGroup() { return cGroup; }

		//vars+=Declaration
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }

		//Declaration
		public RuleCall getVarsDeclarationParserRuleCall_0_0() { return cVarsDeclarationParserRuleCall_0_0; }

		//("," vars+=Declaration)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vars+=Declaration
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }

		//Declaration
		public RuleCall getVarsDeclarationParserRuleCall_1_1_0() { return cVarsDeclarationParserRuleCall_1_1_0; }

		//("st" property=ORing)?
		public Group getGroup_2() { return cGroup_2; }

		//"st"
		public Keyword getStKeyword_2_0() { return cStKeyword_2_0; }

		//property=ORing
		public Assignment getPropertyAssignment_2_1() { return cPropertyAssignment_2_1; }

		//ORing
		public RuleCall getPropertyORingParserRuleCall_2_1_0() { return cPropertyORingParserRuleCall_2_1_0; }
	}

	public class ProblemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Problem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsDeclarationParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsDeclarationParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Keyword cStKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyORingParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		
		//Problem:
		//	vars+=Declaration ("," vars+=Declaration)* "st" property=ORing;
		@Override public ParserRule getRule() { return rule; }

		//vars+=Declaration ("," vars+=Declaration)* "st" property=ORing
		public Group getGroup() { return cGroup; }

		//vars+=Declaration
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }

		//Declaration
		public RuleCall getVarsDeclarationParserRuleCall_0_0() { return cVarsDeclarationParserRuleCall_0_0; }

		//("," vars+=Declaration)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vars+=Declaration
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }

		//Declaration
		public RuleCall getVarsDeclarationParserRuleCall_1_1_0() { return cVarsDeclarationParserRuleCall_1_1_0; }

		//"st"
		public Keyword getStKeyword_2() { return cStKeyword_2; }

		//property=ORing
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//ORing
		public RuleCall getPropertyORingParserRuleCall_3_0() { return cPropertyORingParserRuleCall_3_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		//Declaration:
		//	type=Type? varName=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=Type? varName=ID
		public Group getGroup() { return cGroup; }

		//type=Type?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplateTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTemplateTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTemplateTypeAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Type:
		//	name=ID ("<" templateType=Type ">")?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("<" templateType=Type ">")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("<" templateType=Type ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//templateType=Type
		public Assignment getTemplateTypeAssignment_1_1() { return cTemplateTypeAssignment_1_1; }

		//Type
		public RuleCall getTemplateTypeTypeParserRuleCall_1_1_0() { return cTemplateTypeTypeParserRuleCall_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
	}

	public class ORingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ORing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANDingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cORingLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightANDingParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ORing returns Property:
		//	ANDing ({ORing.left=current} "|" right=ANDing)*;
		@Override public ParserRule getRule() { return rule; }

		//ANDing ({ORing.left=current} "|" right=ANDing)*
		public Group getGroup() { return cGroup; }

		//ANDing
		public RuleCall getANDingParserRuleCall_0() { return cANDingParserRuleCall_0; }

		//({ORing.left=current} "|" right=ANDing)*
		public Group getGroup_1() { return cGroup_1; }

		//{ORing.left=current}
		public Action getORingLeftAction_1_0() { return cORingLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=ANDing
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ANDing
		public RuleCall getRightANDingParserRuleCall_1_2_0() { return cRightANDingParserRuleCall_1_2_0; }
	}

	public class ANDingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANDing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDingLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ANDing returns Property:
		//	Primary ({ANDing.left=current} "&" right=Primary)*;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({ANDing.left=current} "&" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({ANDing.left=current} "&" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{ANDing.left=current}
		public Action getANDingLeftAction_1_0() { return cANDingLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSugarAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuantifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProblemShellParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cORingParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNegationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Primary returns Property:
		//	Atomic | SugarAtomic | Quantifier | ProblemShell | "(" ORing ")" | BooleanLiteral | Negation;
		@Override public ParserRule getRule() { return rule; }

		//-> Atomic | SugarAtomic | Quantifier | ProblemShell | "(" ORing ")" | BooleanLiteral | Negation
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//SugarAtomic
		public RuleCall getSugarAtomicParserRuleCall_1() { return cSugarAtomicParserRuleCall_1; }

		//Quantifier
		public RuleCall getQuantifierParserRuleCall_2() { return cQuantifierParserRuleCall_2; }

		//ProblemShell
		public RuleCall getProblemShellParserRuleCall_3() { return cProblemShellParserRuleCall_3; }

		//"(" ORing ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//ORing
		public RuleCall getORingParserRuleCall_4_1() { return cORingParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_5() { return cBooleanLiteralParserRuleCall_5; }

		//Negation
		public RuleCall getNegationParserRuleCall_6() { return cNegationParserRuleCall_6; }
	}

	public class ProblemShellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProblemShell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProblemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProblemProblemParserRuleCall_1_0 = (RuleCall)cProblemAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ProblemShell:
		//	"{" problem=Problem "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" problem=Problem "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//problem=Problem
		public Assignment getProblemAssignment_1() { return cProblemAssignment_1; }

		//Problem
		public RuleCall getProblemProblemParserRuleCall_1_0() { return cProblemProblemParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNegatedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNegatedPrimaryParserRuleCall_1_0 = (RuleCall)cNegatedAssignment_1.eContents().get(0);
		
		//Negation:
		//	"!" negated=Primary;
		@Override public ParserRule getRule() { return rule; }

		//"!" negated=Primary
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//negated=Primary
		public Assignment getNegatedAssignment_1() { return cNegatedAssignment_1; }

		//Primary
		public RuleCall getNegatedPrimaryParserRuleCall_1_0() { return cNegatedPrimaryParserRuleCall_1_0; }
	}

	public class QuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cQuantifierAlternatives_0_0 = (Alternatives)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cQuantifierForallKeyword_0_0_0 = (Keyword)cQuantifierAlternatives_0_0.eContents().get(0);
		private final Keyword cQuantifierExistsKeyword_0_0_1 = (Keyword)cQuantifierAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubjectProblemParserRuleCall_2_0 = (RuleCall)cSubjectAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateORingParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Quantifier:
		//	quantifier=("forall" | "exists") "(" subject=Problem ":" predicate=ORing ")";
		@Override public ParserRule getRule() { return rule; }

		//quantifier=("forall" | "exists") "(" subject=Problem ":" predicate=ORing ")"
		public Group getGroup() { return cGroup; }

		//quantifier=("forall" | "exists")
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }

		//"forall" | "exists"
		public Alternatives getQuantifierAlternatives_0_0() { return cQuantifierAlternatives_0_0; }

		//"forall"
		public Keyword getQuantifierForallKeyword_0_0_0() { return cQuantifierForallKeyword_0_0_0; }

		//"exists"
		public Keyword getQuantifierExistsKeyword_0_0_1() { return cQuantifierExistsKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//subject=Problem
		public Assignment getSubjectAssignment_2() { return cSubjectAssignment_2; }

		//Problem
		public RuleCall getSubjectProblemParserRuleCall_2_0() { return cSubjectProblemParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//predicate=ORing
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//ORing
		public RuleCall getPredicateORingParserRuleCall_4_0() { return cPredicateORingParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SugarAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SugarAtomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionIDTerminalRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsSugarAdditionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsSugarAdditionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SugarAtomic:
		//	Function=ID "(" (args+=SugarAddition ("," args+=SugarAddition)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//Function=ID "(" (args+=SugarAddition ("," args+=SugarAddition)*)? ")"
		public Group getGroup() { return cGroup; }

		//Function=ID
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//ID
		public RuleCall getFunctionIDTerminalRuleCall_0_0() { return cFunctionIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=SugarAddition ("," args+=SugarAddition)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=SugarAddition
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//SugarAddition
		public RuleCall getArgsSugarAdditionParserRuleCall_2_0_0() { return cArgsSugarAdditionParserRuleCall_2_0_0; }

		//("," args+=SugarAddition)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=SugarAddition
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//SugarAddition
		public RuleCall getArgsSugarAdditionParserRuleCall_2_1_1_0() { return cArgsSugarAdditionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionIDTerminalRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsIDTerminalRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Atomic:
		//	Function=ID "(" (args+=ID ("," args+=ID)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//Function=ID "(" (args+=ID ("," args+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//Function=ID
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//ID
		public RuleCall getFunctionIDTerminalRuleCall_0_0() { return cFunctionIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=ID ("," args+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=ID
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_0_0() { return cArgsIDTerminalRuleCall_2_0_0; }

		//("," args+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=ID
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_1_1_0() { return cArgsIDTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTRUEKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanLiteral:
		//	value=("TRUE" | "FALSE");
		@Override public ParserRule getRule() { return rule; }

		//value=("TRUE" | "FALSE")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"TRUE" | "FALSE"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"TRUE"
		public Keyword getValueTRUEKeyword_0_0() { return cValueTRUEKeyword_0_0; }

		//"FALSE"
		public Keyword getValueFALSEKeyword_0_1() { return cValueFALSEKeyword_0_1; }
	}

	public class TheoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequirementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequirementORingParserRuleCall_0_0 = (RuleCall)cRequirementAssignment_0.eContents().get(0);
		private final Assignment cImplicationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cImplicationAlternatives_1_0 = (Alternatives)cImplicationAssignment_1.eContents().get(0);
		private final Keyword cImplicationHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cImplicationAlternatives_1_0.eContents().get(0);
		private final Keyword cImplicationLessThanSignHyphenMinusKeyword_1_0_1 = (Keyword)cImplicationAlternatives_1_0.eContents().get(1);
		private final Keyword cImplicationLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_2 = (Keyword)cImplicationAlternatives_1_0.eContents().get(2);
		private final Assignment cResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultORingParserRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCostINTTerminalRuleCall_4_0 = (RuleCall)cCostAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPseudoCodeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPseudoCodeSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cPseudoCodeAssignment_7_1.eContents().get(0);
		
		//Theorem:
		//	Requirement=ORing Implication=("->" | "<-" | "<->") Result=ORing "," Cost=INT "," Description=STRING (","
		//	PseudoCode=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//Requirement=ORing Implication=("->" | "<-" | "<->") Result=ORing "," Cost=INT "," Description=STRING (","
		//PseudoCode=STRING)?
		public Group getGroup() { return cGroup; }

		//Requirement=ORing
		public Assignment getRequirementAssignment_0() { return cRequirementAssignment_0; }

		//ORing
		public RuleCall getRequirementORingParserRuleCall_0_0() { return cRequirementORingParserRuleCall_0_0; }

		//Implication=("->" | "<-" | "<->")
		public Assignment getImplicationAssignment_1() { return cImplicationAssignment_1; }

		//"->" | "<-" | "<->"
		public Alternatives getImplicationAlternatives_1_0() { return cImplicationAlternatives_1_0; }

		//"->"
		public Keyword getImplicationHyphenMinusGreaterThanSignKeyword_1_0_0() { return cImplicationHyphenMinusGreaterThanSignKeyword_1_0_0; }

		//"<-"
		public Keyword getImplicationLessThanSignHyphenMinusKeyword_1_0_1() { return cImplicationLessThanSignHyphenMinusKeyword_1_0_1; }

		//"<->"
		public Keyword getImplicationLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_2() { return cImplicationLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_2; }

		//Result=ORing
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }

		//ORing
		public RuleCall getResultORingParserRuleCall_2_0() { return cResultORingParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//Cost=INT
		public Assignment getCostAssignment_4() { return cCostAssignment_4; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_4_0() { return cCostINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//Description=STRING
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_0() { return cDescriptionSTRINGTerminalRuleCall_6_0; }

		//("," PseudoCode=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//PseudoCode=STRING
		public Assignment getPseudoCodeAssignment_7_1() { return cPseudoCodeAssignment_7_1; }

		//STRING
		public RuleCall getPseudoCodeSTRINGTerminalRuleCall_7_1_0() { return cPseudoCodeSTRINGTerminalRuleCall_7_1_0; }
	}

	public class SugarAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SugarAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSugarMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSugarAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_1_0 = (Alternatives)cSymbolAssignment_1_1.eContents().get(0);
		private final Keyword cSymbolPlusSignKeyword_1_1_0_0 = (Keyword)cSymbolAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSymbolHyphenMinusKeyword_1_1_0_1 = (Keyword)cSymbolAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSugarMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// **********Math things**********
		// SugarAddition returns SugarNumericalProperty:
		//	SugarMultiplication ({SugarAddition.left=current} symbol=("+" | "-") right=SugarMultiplication)*;
		@Override public ParserRule getRule() { return rule; }

		//SugarMultiplication ({SugarAddition.left=current} symbol=("+" | "-") right=SugarMultiplication)*
		public Group getGroup() { return cGroup; }

		//SugarMultiplication
		public RuleCall getSugarMultiplicationParserRuleCall_0() { return cSugarMultiplicationParserRuleCall_0; }

		//({SugarAddition.left=current} symbol=("+" | "-") right=SugarMultiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{SugarAddition.left=current}
		public Action getSugarAdditionLeftAction_1_0() { return cSugarAdditionLeftAction_1_0; }

		//symbol=("+" | "-")
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }

		//"+" | "-"
		public Alternatives getSymbolAlternatives_1_1_0() { return cSymbolAlternatives_1_1_0; }

		//"+"
		public Keyword getSymbolPlusSignKeyword_1_1_0_0() { return cSymbolPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getSymbolHyphenMinusKeyword_1_1_0_1() { return cSymbolHyphenMinusKeyword_1_1_0_1; }

		//right=SugarMultiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SugarMultiplication
		public RuleCall getRightSugarMultiplicationParserRuleCall_1_2_0() { return cRightSugarMultiplicationParserRuleCall_1_2_0; }
	}

	public class SugarMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SugarMultiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSugarNumericalPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSugarMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_1_0 = (Alternatives)cSymbolAssignment_1_1.eContents().get(0);
		private final Keyword cSymbolAsteriskKeyword_1_1_0_0 = (Keyword)cSymbolAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSymbolSolidusKeyword_1_1_0_1 = (Keyword)cSymbolAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSugarNumericalPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SugarMultiplication returns SugarNumericalProperty:
		//	SugarNumericalPrimary ({SugarMultiplication.left=current} symbol=("*" | "/") right=SugarNumericalPrimary)*;
		@Override public ParserRule getRule() { return rule; }

		//SugarNumericalPrimary ({SugarMultiplication.left=current} symbol=("*" | "/") right=SugarNumericalPrimary)*
		public Group getGroup() { return cGroup; }

		//SugarNumericalPrimary
		public RuleCall getSugarNumericalPrimaryParserRuleCall_0() { return cSugarNumericalPrimaryParserRuleCall_0; }

		//({SugarMultiplication.left=current} symbol=("*" | "/") right=SugarNumericalPrimary)*
		public Group getGroup_1() { return cGroup_1; }

		//{SugarMultiplication.left=current}
		public Action getSugarMultiplicationLeftAction_1_0() { return cSugarMultiplicationLeftAction_1_0; }

		//symbol=("*" | "/")
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }

		//"*" | "/"
		public Alternatives getSymbolAlternatives_1_1_0() { return cSymbolAlternatives_1_1_0; }

		//"*"
		public Keyword getSymbolAsteriskKeyword_1_1_0_0() { return cSymbolAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getSymbolSolidusKeyword_1_1_0_1() { return cSymbolSolidusKeyword_1_1_0_1; }

		//right=SugarNumericalPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SugarNumericalPrimary
		public RuleCall getRightSugarNumericalPrimaryParserRuleCall_1_2_0() { return cRightSugarNumericalPrimaryParserRuleCall_1_2_0; }
	}

	public class SugarNumericalPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SugarNumericalPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSugarAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSugarNumericalPrimaryParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SugarNumericalPrimary returns SugarNumericalProperty:
		//	NumberLiteral | -> Atomic | SugarAtomic | "(" SugarNumericalPrimary ")";
		@Override public ParserRule getRule() { return rule; }

		//NumberLiteral | -> Atomic | SugarAtomic | "(" SugarNumericalPrimary ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//-> Atomic
		public RuleCall getAtomicParserRuleCall_1() { return cAtomicParserRuleCall_1; }

		//SugarAtomic
		public RuleCall getSugarAtomicParserRuleCall_2() { return cSugarAtomicParserRuleCall_2; }

		//"(" SugarNumericalPrimary ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//SugarNumericalPrimary
		public RuleCall getSugarNumericalPrimaryParserRuleCall_3_1() { return cSugarNumericalPrimaryParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final InputElements pInput;
	private final ProblemNoVarsElements pProblemNoVars;
	private final ProblemPropertyOptionalElements pProblemPropertyOptional;
	private final ProblemElements pProblem;
	private final DeclarationElements pDeclaration;
	private final TypeElements pType;
	private final ORingElements pORing;
	private final ANDingElements pANDing;
	private final PrimaryElements pPrimary;
	private final ProblemShellElements pProblemShell;
	private final NegationElements pNegation;
	private final QuantifierElements pQuantifier;
	private final SugarAtomicElements pSugarAtomic;
	private final AtomicElements pAtomic;
	private final BooleanLiteralElements pBooleanLiteral;
	private final TheoremElements pTheorem;
	private final SugarAdditionElements pSugarAddition;
	private final SugarMultiplicationElements pSugarMultiplication;
	private final SugarNumericalPrimaryElements pSugarNumericalPrimary;
	private final NumberLiteralElements pNumberLiteral;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InputGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInput = new InputElements();
		this.pProblemNoVars = new ProblemNoVarsElements();
		this.pProblemPropertyOptional = new ProblemPropertyOptionalElements();
		this.pProblem = new ProblemElements();
		this.pDeclaration = new DeclarationElements();
		this.pType = new TypeElements();
		this.pORing = new ORingElements();
		this.pANDing = new ANDingElements();
		this.pPrimary = new PrimaryElements();
		this.pProblemShell = new ProblemShellElements();
		this.pNegation = new NegationElements();
		this.pQuantifier = new QuantifierElements();
		this.pSugarAtomic = new SugarAtomicElements();
		this.pAtomic = new AtomicElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pTheorem = new TheoremElements();
		this.pSugarAddition = new SugarAdditionElements();
		this.pSugarMultiplication = new SugarMultiplicationElements();
		this.pSugarNumericalPrimary = new SugarNumericalPrimaryElements();
		this.pNumberLiteral = new NumberLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("algorithmMaker.Input".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////NOTE: Any changes to the formatting should be reflected with changes here.
	// Input:
	//	"Given" given=ProblemPropertyOptional ";" (task=("Find" | "Count") goal=Problem | task="Test" goal=(Problem |
	//	ProblemNoVars))? (";" "Theorems:" theorems+=Theorem (";" theorems+=Theorem)* ";"?)?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//ProblemNoVars returns Problem:
	//	property=ORing;
	public ProblemNoVarsElements getProblemNoVarsAccess() {
		return pProblemNoVars;
	}
	
	public ParserRule getProblemNoVarsRule() {
		return getProblemNoVarsAccess().getRule();
	}

	//ProblemPropertyOptional returns Problem:
	//	vars+=Declaration ("," vars+=Declaration)* ("st" property=ORing)?;
	public ProblemPropertyOptionalElements getProblemPropertyOptionalAccess() {
		return pProblemPropertyOptional;
	}
	
	public ParserRule getProblemPropertyOptionalRule() {
		return getProblemPropertyOptionalAccess().getRule();
	}

	//Problem:
	//	vars+=Declaration ("," vars+=Declaration)* "st" property=ORing;
	public ProblemElements getProblemAccess() {
		return pProblem;
	}
	
	public ParserRule getProblemRule() {
		return getProblemAccess().getRule();
	}

	//Declaration:
	//	type=Type? varName=ID;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Type:
	//	name=ID ("<" templateType=Type ">")?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ORing returns Property:
	//	ANDing ({ORing.left=current} "|" right=ANDing)*;
	public ORingElements getORingAccess() {
		return pORing;
	}
	
	public ParserRule getORingRule() {
		return getORingAccess().getRule();
	}

	//ANDing returns Property:
	//	Primary ({ANDing.left=current} "&" right=Primary)*;
	public ANDingElements getANDingAccess() {
		return pANDing;
	}
	
	public ParserRule getANDingRule() {
		return getANDingAccess().getRule();
	}

	//Primary returns Property:
	//	Atomic | SugarAtomic | Quantifier | ProblemShell | "(" ORing ")" | BooleanLiteral | Negation;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//ProblemShell:
	//	"{" problem=Problem "}";
	public ProblemShellElements getProblemShellAccess() {
		return pProblemShell;
	}
	
	public ParserRule getProblemShellRule() {
		return getProblemShellAccess().getRule();
	}

	//Negation:
	//	"!" negated=Primary;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Quantifier:
	//	quantifier=("forall" | "exists") "(" subject=Problem ":" predicate=ORing ")";
	public QuantifierElements getQuantifierAccess() {
		return pQuantifier;
	}
	
	public ParserRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}

	//SugarAtomic:
	//	Function=ID "(" (args+=SugarAddition ("," args+=SugarAddition)*)? ")";
	public SugarAtomicElements getSugarAtomicAccess() {
		return pSugarAtomic;
	}
	
	public ParserRule getSugarAtomicRule() {
		return getSugarAtomicAccess().getRule();
	}

	//Atomic:
	//	Function=ID "(" (args+=ID ("," args+=ID)*)? ")";
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//BooleanLiteral:
	//	value=("TRUE" | "FALSE");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//Theorem:
	//	Requirement=ORing Implication=("->" | "<-" | "<->") Result=ORing "," Cost=INT "," Description=STRING (","
	//	PseudoCode=STRING)?;
	public TheoremElements getTheoremAccess() {
		return pTheorem;
	}
	
	public ParserRule getTheoremRule() {
		return getTheoremAccess().getRule();
	}

	//// **********Math things**********
	// SugarAddition returns SugarNumericalProperty:
	//	SugarMultiplication ({SugarAddition.left=current} symbol=("+" | "-") right=SugarMultiplication)*;
	public SugarAdditionElements getSugarAdditionAccess() {
		return pSugarAddition;
	}
	
	public ParserRule getSugarAdditionRule() {
		return getSugarAdditionAccess().getRule();
	}

	//SugarMultiplication returns SugarNumericalProperty:
	//	SugarNumericalPrimary ({SugarMultiplication.left=current} symbol=("*" | "/") right=SugarNumericalPrimary)*;
	public SugarMultiplicationElements getSugarMultiplicationAccess() {
		return pSugarMultiplication;
	}
	
	public ParserRule getSugarMultiplicationRule() {
		return getSugarMultiplicationAccess().getRule();
	}

	//SugarNumericalPrimary returns SugarNumericalProperty:
	//	NumberLiteral | -> Atomic | SugarAtomic | "(" SugarNumericalPrimary ")";
	public SugarNumericalPrimaryElements getSugarNumericalPrimaryAccess() {
		return pSugarNumericalPrimary;
	}
	
	public ParserRule getSugarNumericalPrimaryRule() {
		return getSugarNumericalPrimaryAccess().getRule();
	}

	//NumberLiteral:
	//	value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
